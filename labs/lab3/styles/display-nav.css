 * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      /* Base body styling - sets consistent font and creates neutral background
         The padding provides breathing room around the entire demo */
      body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
        padding: 20px;
      }


.block-desplay div{
    display: block;
}
      /* =====================================================
         LAYOUT CONTAINER STYLES
         ===================================================== */

      /* Main container provides centered layout with consistent styling
         Max-width prevents content from stretching too wide on large screens
         Margin auto centers the container horizontally */
      .demo-container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      /* Typography hierarchy - h1 for main title, h2 for section headers
         Consistent color scheme and spacing creates visual hierarchy */
      h1 {
        color: #333;
        text-align: center;
        margin-bottom: 30px;
      }

      h2 {
        color: #666;
        margin: 20px 0 10px 0;
        padding-bottom: 5px;
        border-bottom: 2px solid #ddd; /* Visual separator for sections */
      }

      /* Each demo section gets consistent spacing and subtle background
         This helps students visually separate different concepts */
      .demo-section {
        margin-bottom: 30px;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 5px;
      }

      /* =====================================================
         INTERACTIVE BUTTON STYLES
         ===================================================== */

      /* Toggle buttons for switching between navigation methods
         Consistent styling with hover and active states teaches interaction design */
      .toggle-btn {
        padding: 8px 16px;
        margin: 5px;
        background-color: #007bff; /* Primary blue color */
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s; /* Smooth color transition on hover */
      }

      /* Hover state provides immediate visual feedback
         This is crucial for user experience design */
      .toggle-btn:hover {
        background-color: #0056b3; /* Darker blue on hover */
      }

      /* Active state shows which method is currently selected
         Green color clearly indicates the active choice */
      .toggle-btn.active {
        background-color: #28a745; /* Green for active state */
      }

      /* Content area that updates based on navigation interactions
         This demonstrates how navigation affects page content */
      .content-area {
        margin-top: 15px;
        padding: 15px;
        background-color: #e9ecef; /* Light gray background */
        border-radius: 4px;
        min-height: 60px; /* Ensures consistent height even with short content */
      }

      /* =====================================================
         VERTICAL NAVIGATION STYLES
         Purpose: Demonstrates sidebar-style navigation
         Common in: Admin panels, desktop applications, sidebars
         ===================================================== */

      /* Flexbox layout places navigation and content side by side
         Gap property provides consistent spacing between elements */
      .vertical-demo {
        display: flex;
        gap: 20px;
        align-items: flex-start; /* Aligns items to top */
      }

      /* Removes default list styling (bullets, margins)
         Sets fixed width for consistent layout
         Background color creates visual container */
      .vertical-nav ul {
        list-style-type: none;
        width: 150px;
        background-color: #f1f1f1;
        border-radius: 4px;
      }

      /* Block display makes entire link area clickable
         This is a key usability principle - larger click targets are better
         Text decoration removes default underline */
      .vertical-nav li a {
        display: block;
        color: #333;
        padding: 10px 15px;
        text-decoration: none;
        border-bottom: 1px solid #ddd; /* Subtle separator between items */
        transition: all 0.3s ease; /* Smooth transitions for professional feel */
      }

      /* Hover effect provides immediate visual feedback
         Dark background with white text creates strong contrast */
      .vertical-nav li a:hover {
        background-color: #555;
        color: white;
      }

      /* Active state shows current page location
         This is essential for navigation usability */
      .vertical-nav li a.active {
        background-color: #007bff;
        color: white;
      }

      /* =====================================================
         HORIZONTAL NAVIGATION STYLES
         Purpose: Demonstrates three different CSS methods for horizontal layout
         Teaching point: Multiple approaches can achieve same visual result
         ===================================================== */

      /* METHOD 1: INLINE DISPLAY
         Older method but still useful for simple layouts
         Advantage: Simple and straightforward
         Disadvantage: Limited layout control */
      .inline-nav ul {
        list-style-type: none;
        background-color: #333; /* Dark background for contrast */
        border-radius: 4px;
        padding: 0;
      }

      /* Display: inline removes line breaks between list items
         This creates horizontal layout */
      .inline-nav li {
        display: inline;
      }

      /* Inline-block allows padding while keeping items on same line
         This creates clickable areas around text */
      .inline-nav li a {
        display: inline-block;
        color: white;
        padding: 12px 20px;
        text-decoration: none;
        transition: background-color 0.3s;
      }

      .inline-nav li a:hover {
        background-color: #555;
      }

      /* METHOD 2: FLOAT (Legacy approach)
         Important for students to understand but not recommended for new projects
         Advantage: Historically important, widely supported
         Disadvantage: Requires clearfix, can cause layout issues */
      .float-nav ul {
        list-style-type: none;
        background-color: #333;
        border-radius: 4px;
        overflow: hidden; /* Clearfix - contains floated elements */
      }

      /* Float: left makes elements line up horizontally
         This was the primary method before flexbox */
      .float-nav li {
        float: left;
      }

      .float-nav li a {
        display: block;
        color: white;
        padding: 12px 20px;
        text-decoration: none;
        transition: background-color 0.3s;
      }

      .float-nav li a:hover {
        background-color: #555;
      }

      /* METHOD 3: FLEXBOX (Modern approach)
         Recommended method for modern web development
         Advantage: Powerful, flexible, handles edge cases well
         Disadvantage: Requires understanding of flexbox concepts */
      .flex-nav ul {
        list-style-type: none;
        background-color: #333;
        border-radius: 4px;
        display: flex; /* Creates flexible layout container */
      }

      /* Flex: 1 makes each item take equal space
         This creates evenly distributed navigation items */
      .flex-nav li {
        flex: 1;
      }

      .flex-nav li a {
        display: block;
        color: white;
        padding: 12px 20px;
        text-decoration: none;
        text-align: center; /* Centers text in each flex item */
        transition: background-color 0.3s;
      }

      .flex-nav li a:hover {
        background-color: #555;
      }

      /* =====================================================
         DROPDOWN NAVIGATION STYLES
         Purpose: Demonstrates complex navigation hierarchies
         Key concept: CSS positioning (relative + absolute)
         ===================================================== */

      /* Main dropdown container uses flexbox for horizontal layout
         Justify-content: center centers the navigation */
      .dropdown-nav ul {
        list-style-type: none;
        background-color: #333;
        border-radius: 4px;
        display: flex;
        justify-content: center;
      }

      /* Relative positioning creates positioning context for absolute children
         This is crucial for dropdown functionality */
      .dropdown {
        position: relative;
      }

      /* Standard navigation link styling
         Consistent with other navigation methods */
      .dropdown-nav a {
        display: block;
        color: white;
        padding: 12px 20px;
        text-decoration: none;
        transition: background-color 0.3s;
      }

      .dropdown-nav a:hover {
        background-color: #555;
      }

      /* The dropdown content - hidden by default
         Absolute positioning removes it from document flow
         Z-index ensures it appears above other content */
      .dropdown-content {
        display: none; /* Hidden by default - key to dropdown functionality */
        position: absolute; /* Positioned relative to .dropdown parent */
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
        z-index: 1; /* Ensures dropdown appears above other content */
        border-radius: 4px;
        overflow: hidden; /* Ensures rounded corners work properly */
      }

      /* CSS :hover pseudo-class shows dropdown on hover
         This is pure CSS interaction without JavaScript
         Teaching point: CSS can handle simple interactions */
      .dropdown:hover .dropdown-content {
        display: block;
      }

      /* Dropdown links have different styling than main navigation
         Demonstrates how nested elements can have different appearance */
      .dropdown-content a {
        color: #333; /* Dark text on light background */
        padding: 10px 15px;
        border-bottom: 1px solid #ddd; /* Separators between items */
      }

      .dropdown-content a:hover {
        background-color: #f1f1f1; /* Subtle hover effect */
      }

      /* =====================================================
         METHOD SWITCHING FUNCTIONALITY
         Purpose: Allows students to compare different CSS approaches
         ===================================================== */

      /* Initially hidden method demos
         JavaScript will show/hide these based on button clicks */
      .method-demo {
        display: none;
      }

      /* Active method demo is visible
         This creates the switching functionality */
      .method-demo.active {
        display: block;
      }